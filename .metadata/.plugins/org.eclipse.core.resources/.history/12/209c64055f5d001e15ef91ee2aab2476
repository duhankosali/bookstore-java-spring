package com.oredata.bookStore.business.concretes;


import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.oredata.bookStore.business.abstracts.OrderService;
import com.oredata.bookStore.business.requests.BookOrder;
import com.oredata.bookStore.business.requests.CreateOrderRequest;
import com.oredata.bookStore.business.responses.GetByOrderIdOrderDetailsResponse;
import com.oredata.bookStore.business.responses.GetByUserIdOrdersResponse;
import com.oredata.bookStore.common.utilities.mappers.ModelMapperService;
import com.oredata.bookStore.dataAccess.abstracts.BookRepository;
import com.oredata.bookStore.dataAccess.abstracts.OrderBookRepository;
import com.oredata.bookStore.dataAccess.abstracts.OrderRepository;
import com.oredata.bookStore.dataAccess.abstracts.UserRepository;
import com.oredata.bookStore.entities.concretes.Book;
import com.oredata.bookStore.entities.concretes.OrderBook;
import com.oredata.bookStore.entities.concretes.Orders;

import lombok.AllArgsConstructor;

@Service // Business
@AllArgsConstructor
public class OrderManager implements OrderService{
	private OrderRepository orderRepository;
	private OrderBookRepository orderBookRepository;
	private BookRepository bookRepository;
	private ModelMapperService modelMapperService;
	private UserRepository userRepository;
	
	@Override
    public List<GetByUserIdOrdersResponse> getByUserId(Long userId) {
        List<Orders> orders = orderRepository.findOrdersByUserId(userId);
        List<GetByUserIdOrdersResponse> myResponse = orders.stream()
			    .map(book -> this.modelMapperService.forResponse()
			            .map(book, GetByUserIdOrdersResponse.class))
			    .collect(Collectors.toList());
		return myResponse;	
    }

	@Override
	public List<GetByOrderIdOrderDetailsResponse> getByOrderId(Long orderId) {
		List<OrderBook> orderBooks = orderBookRepository.findOrderBooksByOrderId(orderId); 
		List<GetByOrderIdOrderDetailsResponse> myResponse = orderBooks.stream()
			    .map(book -> this.modelMapperService.forResponse()
			            .map(book, GetByOrderIdOrderDetailsResponse.class))
			    .collect(Collectors.toList());
		return myResponse;	
	}

	// add and add helper methods.
	@Override
	public String add(CreateOrderRequest createOrderRequest) {
	    double totalAmount = calculateTotalAmount(createOrderRequest.getBooks());
	    Orders newOrder = saveNewOrder(createOrderRequest.getUserId(), totalAmount);
	    saveOrderBooks(newOrder, createOrderRequest.getBooks());
	}

	private double calculateTotalAmount(List<BookOrder> bookOrders) {
	    double totalAmount = 0;
	    for (BookOrder bookOrder : bookOrders) {
	        String isbn = bookOrder.getIsbn();
	        @SuppressWarnings("deprecation")
			Book book = bookRepository.getById(isbn);
	        var price = book.getPrice();
	        var amount = price * bookOrder.getQuantity();
	        totalAmount += amount;
	    }
	    return totalAmount;
	}

	@SuppressWarnings("deprecation")
	private Orders saveNewOrder(Long userId, double totalAmount) {
	    Orders newOrder = new Orders();
	    newOrder.setUser(userRepository.getById(userId));
	    newOrder.setPrice(totalAmount);
	    return orderRepository.save(newOrder);
	}

	@SuppressWarnings("deprecation")
	private void saveOrderBooks(Orders order, List<BookOrder> bookOrders) {
	    for (BookOrder bookOrder : bookOrders) {
	        OrderBook orderBook = new OrderBook();
	        orderBook.setOrder(order);
	        orderBook.setBook(bookRepository.getById(bookOrder.getIsbn()));
	        orderBook.setQuantity(bookOrder.getQuantity());
	        orderBookRepository.save(orderBook);
	    }
	}


}
