package com.oredata.bookStore.business.concretes;


import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.oredata.bookStore.business.abstracts.OrderService;
import com.oredata.bookStore.business.requests.CreateOrderRequest;
import com.oredata.bookStore.business.responses.GetByOrderIdOrderDetailsResponse;
import com.oredata.bookStore.business.responses.GetByUserIdOrdersResponse;
import com.oredata.bookStore.common.utilities.mappers.ModelMapperService;
import com.oredata.bookStore.dataAccess.abstracts.OrderBookRepository;
import com.oredata.bookStore.dataAccess.abstracts.OrderRepository;
import com.oredata.bookStore.entities.concretes.OrderBook;
import com.oredata.bookStore.entities.concretes.Orders;

import lombok.AllArgsConstructor;

@Service // Business
@AllArgsConstructor
public class OrderManager implements OrderService{
	private OrderRepository orderRepository;
	private OrderBookRepository orderBookRepository;
	private ModelMapperService modelMapperService;

	@Override
    public List<GetByUserIdOrdersResponse> getByUserId(Long userId) {
        List<Orders> orders = orderRepository.findOrdersByUserId(userId);
        List<GetByUserIdOrdersResponse> myResponse = orders.stream()
			    .map(book -> this.modelMapperService.forResponse()
			            .map(book, GetByUserIdOrdersResponse.class))
			    .collect(Collectors.toList());
		return myResponse;	
    }

	@Override
	public List<GetByOrderIdOrderDetailsResponse> getByOrderId(Long orderId) {
		List<OrderBook> orderBooks = orderBookRepository.findOrderBooksByOrderId(orderId); 
		List<GetByOrderIdOrderDetailsResponse> myResponse = orderBooks.stream()
			    .map(book -> this.modelMapperService.forResponse()
			            .map(book, GetByOrderIdOrderDetailsResponse.class))
			    .collect(Collectors.toList());
		return myResponse;	
	}

	@Override
	public void add(CreateOrderRequest createOrderRequest) {
		// TODO Auto-generated method stub
		return null;
	}	

}
